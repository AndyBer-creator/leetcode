package main

import (
	"fmt"
	"math"
)

func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	// Ensure nums1 is the smaller array
	if len(nums1) > len(nums2) {
		nums1, nums2 = nums2, nums1
	}

	m, n := len(nums1), len(nums2)
	imin, imax := 0, m
	halfLen := (m + n + 1) / 2

	for imin <= imax {
		i := (imin + imax) / 2
		j := halfLen - i

		if i < m && nums2[j-1] > nums1[i] {
			// i is too small, must increase it
			imin = i + 1
		} else if i > 0 && nums1[i-1] > nums2[j] {
			// i is too big, must decrease it
			imax = i - 1
		} else {
			// i is perfect
			var maxOfLeft, minOfRight float64

			if i == 0 {
				maxOfLeft = float64(nums2[j-1])
			} else if j == 0 {
				maxOfLeft = float64(nums1[i-1])
			} else {
				maxOfLeft = math.Max(float64(nums1[i-1]), float64(nums2[j-1]))
			}

			if (m+n)%2 == 1 {
				return maxOfLeft // Odd length case
			}

			if i == m {
				minOfRight = float64(nums2[j])
			} else if j == n {
				minOfRight = float64(nums1[i])
			} else {
				minOfRight = math.Min(float64(nums1[i]), float64(nums2[j]))
			}

			return (maxOfLeft + minOfRight) / 2.0 // Even length case
		}
	}

	return 0.0 // This return is not expected to be reached
}

func main() {
	// Sample test cases
	nums1 := []int{1, 3}
	nums2 := []int{2}
	fmt.Printf("Median: %.5f\n", findMedianSortedArrays(nums1, nums2)) // Output: 2.00000

	nums1 = []int{1, 2}
	nums2 = []int{3, 4}
	fmt.Printf("Median: %.5f\n", findMedianSortedArrays(nums1, nums2)) // Output: 2.50000
}
